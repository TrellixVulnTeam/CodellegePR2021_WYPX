HTML
    *Que es una etiqueta?
        - Es un elemento Web
        Ejemplo: <etiqueta>
        Ejemplo: <etiqueta></etiqueta>
        <br>
        <img>
        <imput>
        <div></div>
    * Menciona cuál es la estructura de una etiqueta
        <etiqueta ATTR='Valor'>CONTENIDO</etiqueta>

        - Donde CONTENIDO puede ser desde texto hasta otras etiquetas.
        - ATTR es un atributo, y su valor siempre va entre comillas

    * Escribir la etiqueta "Desarrolla" con el atributo "Horario" que tenga el valor 9:00 AM, 
    * el atributo nombreCurso que tenga el valor de Primavera2021 y otro atributo, "Maestro", con el valor de KEVIN.
        <Desarrolla Horario="9:00 A.M." nombreCurso="Primavera2021" Maestro="KEVIN"></Desarrolla>

    * Escriba la etiqueta EXAMEN, que tiene los atributos dia con el valor 12/03/2021 y hora que sea el valor de 9:00 a.m
        <EXAMEN fecha="12/03/2021" hora="9:00 a.m"></EXAMEN>

    *Que tipos de etiquetas existen:
        - Doble etiqueta: <div>CONTENIDO</div>
        - Etiqueta individual: <input type="text">
        - Eiqueta mixtas: <li>Item</li> || <li>Item
            <ul>
                <li>Elemento 1</li>
                <li>Elemento 2
                <li>Elemento 3
            </ul>

    * Que es una pagina Web:
        - Es un conjunto de etiquetas con contenido.

    *Estructura básica de HTML 
        <HTML>
            <head>
                // Metadatos (Formato, debemos definirlo, no viene como UTF-( por default))
                // Importaciones (scripts, css, fonts, etc.)
                // Titulo de la página.
            </head>
            <body>
                //Contenido de la página
            </body>
        </HTML>

    *Escribir todas las etiquetas de HTML que recordemos y pongamos algunas caracteristicas de ellas.
        <link>: Sirve para importar librerías de estilos o fuentes. Se pone en el head
        <a href="">: Crear anclajes a un enlace/link (hipervinculo). Es un elemento en linea (inline) y viene por
                     defecto con el texto subrayado, azul y cuando se visita cambia de color, un cursor de mano(pointer).
        <header>: El encabezado. Es la parte principal del body. Es un bloque.
        <main>: El contenido principal del body. Es un bloque.
        <footer>: Es el pie de página del body. Es un bloque.
        <body>: Cuerpo de la página. Es todo el contenido de la página.
        <HTML>: Define el documento como un HTML (Hyper Text Markup Language).
        <ol>: Lista ordenada. Es un bloque pero tiene cierto margen y enumera u ordena los elementos. Su contenido deben ser solo <li>.
        <li>: Elemento de la lista (<ol> o <ul>).
        <ul>: Lista no ordenada. Es un bloque con ciertos márgen y solo acumula los elementos con un simbolo (asterisco, etc).
        <tr>: Define una fila de una tabla. Son bloques.
        <td>: Define una celda de un tr. Son inline (podemos tener N cantidad de celdas en una fila).
        <table>: Es una tabla de contenido. Se divide en filas y celdas. Es un bloque.
        <section>: Son parte de la semántica. Subdividen el contenido de un elemento. Son bloques.
        <article>: Son parte de la semántica. Subdividen el contenido de un elemento. Son bloques.
        <div>: Es un divisor. Es un bloque
        <button>: Representa un boton. Es inline.
        <input>: Nos permiten entrada de datos. Son Inline. Cambian de acuerdo al atributo type.
            - text: Todo input por default es type="text". Es una caja de texto.
            - checkbox: Casilla seleccionable.
            - radio: Es un boton que al seleccionar una opción, desmarca otra. Solo se puede escoger 1 de N.
            - button: Representa un boton. En el atributo value se pone el texto del boton.
            - date: Es un calendario para seleccionar una fecha. El atributo value representa la fecha que querramos
            - file: Es un botón para seleccionar un archivo de la computadora.
            - color: Es un selector de colores.
            - Submit: Es el botón que acciona un form.
            - reset: Limpia todos los campos de un form.
        <form>: Es un formulario para recopilar datos. Siempre lleva dentro input, select, textarea...
                Internamente los forms obtienen una lista de valores que se le asignan, dependiendo del valor atributo
                method (GET, POST). Para esto los campos deben tener el atributo name asignado. Debe llevar un botón Submit
                para accionar el formulario.
        <select>: Es una lista de opciones. Su contenido son puros <option>.
        <textarea>: Es una caja de texto más amplia y multilinea.
        <img>:  Representa la imagen que querramos poner con el atributo src. Es inline y toma el tamaño de la imagen
                si no le definimos uno.

CSS 
Conceptos basicos
    * Que significa CSS:
        - Cascading Style Sheet (Hoja de estilos en cascada)
    
    *Porqué se le dice "en cascada":
        - Va en orden modificando de arriba hacia abajo.

    * Qué es una regla de CSS:
        - Conjunto de propiedades definidas para un selector.
        - Representa uno o varios elementos del HTML.

    * Cómo se define una clase:
        - .nombreClase, .nombre-Clase, .nombreClase1, ._nombreClase

    * Cómo se pone el sector para ID'seleccionar
        - #IDElemento

    * Qué es un nodo:
        - Es un elemento.

    * Mencionar algunos selectores de nodos:
        - Seleccionar todos los nodos de un tipo
            * Selector, Selector OtroSelector, .clase, .clase OtroSelector, #ID, #ID OtroSelector
                h1 {} - Crea una regla para todos los h1
                p {} - Crea una regla para todos los página
                .clase {} - Crea una regla para todos los .clase
        - Seleccionar el nodo inmediatamente dentro de una etiqueta:
            * Ejemplo: Un p que esté directamente dentro de un div:
                div > p {}
                <div>
                    <h2></h2>
                    <p></p>
                </div>

                No aplica para:
                <div>
                    <section>
                        <h2></h2>
                        <p></p>
                    </section
                </div>
    * Menciona los pseudoelementos:
        - ::first-letter //funciona para texto en parrafo
        - ::first-linea //funciona para texto en parrafo
        - ::selection //funciona para texto en parrafo
        - ::before
        - ::after

    * Menciona algunas pseudoclases:
        - :first-child
        - :last-child
        - :nth-child(n)
        - :hover

    * Definir una regla para todos los párrafos dentro de un divisor que está en una seccion con la clase "Principal".
        -HTML:
            <section class='Principal'>
                <div>
                    <p></p>
                    <p></p>
                </div>
            </section>

        -Regla CSS:
            section.Principal div p {}

    * Definir una regla para seleccionar el primer elemento de una lista no ordenada que se encuentra dentro del
      header de un elemento de la clase "tarjeta":
        - HTML:
            <div class="tarjeta">
                <header>
                    <ul>
                        <li>Elemento 1</li>
                        <li>Elemento 2
                        <li>Elemento 3
                    </ul>
                </header>
            </div>

        - CSS:
            - .tarjeta header ul li:first-child {}
            - .tarjeta header ul li:nth-child(1) {}
    
    * Qué es una propiedad de CSS
        - Es una propiedad de estilo del elemnto que nuestro selector esta seleccionando.
            -> color: red;
            -> background: blue;
            -> width 50%;

    * Crear una regla para el primer span dentro de un párrafo con clase "Descripcion" que se encuentra dentro de
        en un div. El div esta dentro de un articulo, pero ese ariculo es el hijo inmediato de una seccion con id Inicio.
        HTML:
            <section id="Inicio">
                <article>
                    <div>
                        <p class="Descripcion">
                            <span></span>
                            <span></span>
                            <span></span>
                        </p>
                    </div>
                </article>
            </section>

        CSS:
        #Inicio > article div p.Descripcion span:first-child {
            color: green;
        }

    * A la regla anterior vamos a definir los siguientes estilos:
        - Debe tener un color de texto verde
        - Fuente de tamaño 2 rem
        - Debe tener un borde negro de 1 px de grosr
        - Debe tener una imagen de fondo que se ajuste a su tamaño.
        - Su tamaño será de 300px de ancho * 180px de altura

        #Inicio > article div p.Descripcion span:first-child {
            color: green;
            font-size: 2rem;
            border: 1px solid black;
            background-image: url('http://image.png')
            background-size: 100% 100%;
            width: 300px;
            height: 180px;
        }
    
    * Describir la diferencia entre Margin, Border y Padding:
        - Margin: Separacion entre las orillas de la figura y lo que está afuera.
        - Padding: Es el espaciado interno del elemento. De los bordes hacia adentro.
        - Border: Es visible, se dibuja y se puede manipular. Son las orillas del elemento.

    * Tipos de display:
        - block: width 100%. No tiene altura.
        - inline-block: Va en linea, tiene un pequeño margen. Se usa para separar palabras, texto. Se le puede
                        cambiar el tamaño.
        - inline: Va en linea, pero no se le pueden dar márgenes ni tamaño.
        - table: Es un bloque que permite alinear elementos con display table-row y table-cell. 
                    - Habilita el vertical-align
        - table-row: Crear un bloque del tipo fila para un display table. Se autoajusta al numero de divisiones.
        - table-cell: Crear un bloque del tipo cell para un display-row. Se autoajusta al numero de divisiones.

    * Flotar elementos:
        - Ordena los elementos flotando desde la parte superior (izquierda o derecha)
        - Para limpiarlo hay que usar un "clear"

    * Posicionamiento:
    - Le indica a un elemento que se puede mover en base a las cc top, left, bottom o right de un elemento relativo mas cercano...
        Para esto es necesario tener un elemento con posicionr relativa y todos los elementos siguientes con posición
        absoluta se moverán dentro de ese contenedor.
            -> position: abosolute. Activa las coordenadas top, left, bottom y right.
            -> relative:No cambia mucho, solo le permite al elemento ser un contenedor que acepte elementos absolute.
            -> fixed: Al igual que absolute, se posiciona sobre la ventana del HTML, pero su posicion siempre será fija en la pantalla.
            -> sticky: Al igual que absolute, se posiciona sobre la ventana del HTML, pero su posicion siempre será fija en la pantalla...
                        Este respeta el tamaño de su elemento.

Diseñar un sitio web que les permita describir su autobiografia...
Incluir tarjetas con diferentes eventos de su vida que les haya hecho mucho impacto.

Javascript
Conceptos básicos

    * Qué es Javascript
        - Es un lenguaje funcional de programación (Web). Es un lenguaje interpretado.


JQuery
Es una libreria multi browser que funciona de la misma manera en cualquier
browser y/o dispositivo
* Su uso principal es recorrer, buscar y manipular el DOM (arbol de nodos).
*Puede buscar elementos de la siguiente manera:
    - Por ID
    - Por etiquetas.
    - ....
    - PERO TODO, LO HACE POR SELECTORES (Clases, por ID, nombre, etc.)
    $('#ID');
JQuery tiene dos formas de usarse:
    - Como objeto con funciones de complemento.
    - Como funcion de apoyo y busqueda.
    
    Cuando es funcion se puede utilizar de dos maneras:
    $('Selector') // Regresar elementos JQueryHTML
    $(function()) Evento de onload


Para servidores
    Instalar nodeJS
    Instalar npm install express
    npm init - Se utiliza para inicializar un proyecto

    URL =   http://localhost:666/users/all => GET
            http://localhost:666/users/all => POST
                {
                    name:'Fabian',
                    nickname: 'FabCz
                }

    Operaciones del CRUD
        DELETE
        GET
        POST
        UPTDATE
============================================================== Ejecutar aplicacion de node ==============================

    En una consola en la ubicacion del archivo

============================================================== crear un nuevo proyecto ==============================

Se crea una nueva carpeta y se crea el archivo inicial('ArchivoMain.js).
    En el cuerpo del correo se declara = "const express = require('express');"
Se abre la consola de windows en la raiz de nuestro proyecto y se inicia el comando = "npm init"
Se confirman los datos para iniciar el package.json
Una vez creado el package.json nos vamos a la consola y se inicia el comando = "npm install express"
Se inicia el comando "node" + ArchivoMain.js 
Instalar un modulo de node:
    En la consola ejecutar: npm install MODULO

Para crear un servidor nuevo se necesita un puerto = "const PORT = 777;"
Se crea una app del servidor con la constante app = "const app = express();"
    Esta app puede contener endpoint en la url base:
        app.use('/endopoint');
        por default el .use se hace en endpoint
    express contiene un parametro .use() este recibe 2 parametros
        nombre del endpoint .use('/nameEndpoint')
        funcion con parametros de request y response (req, res)
    Se crea un comando = app.listen(PORT)
        Esto es para escuchar el puerto que declaramos al inicio del codigo
    Con el siguiente codigo importamos el formato que queremos que nuestro servidor utilice.
        Aqui establecemos a postman que lea el body como .json
        app.use(bodyParser.json());
        app.use(bodyParser.urlencoded({
            extended: true
        }))

        Para esto antes debemos declarar = "const bodyParser = require('body-parser');"
    
    .post('/EndpointPost', (req, res) => {})
        req contiene:
            las cookies del usuario
                instalar = npm install cookie-parser
            el body de una peticion
                el body se usa en todo lo que no sea GET
            los parametros de una peticion
                se declaran el nombre de la endpoint como ('/Endpoint/:')
                El params es indiferente al endpoint
            El query de una peticion
                El query se utiliza en GET para busqueda




============================================================== DESARROLLA.STORE ==============================
Todas nuestras páginas (Inicio, catalogo, busqueda, SKU, Carrito, tramitar) van a tener que llamas al GetCar
* Si no hay una sesion Activa
    - Se genera un carrito anonimo nuevo
    - Ese carrito se identifica, se guarda en la BDD
    - Se crea una cookie con la referencia de ese carrito (CartID -> UniqueID)
    - Regresar un carrito vacio
* Si existe:
    - Buscar el carrito en la BDD (Si no existe, volver al paso anterior y continuar aquí)
    - Regresar la información del carrito.
*Si hay una sesion (Usuario hizo login)
    * Si no existe la cookie CartID:
        - Se busca el carrito del usuario en la BDD, si no existe, se crea uno nuevo
        - Se crea una cookie con la referencia de ese carrito (CartID -> User)
        - Regresar el carrito.
    * Si existe:
    ----------Si es diferente al CartID del usuario, fusionar ambos carritos ----------
        - Se busca el carrito del usuario en la BDD, si no existe, se crea uno nuevo
        - Regresar el carrito.